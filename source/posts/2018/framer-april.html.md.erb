---
date: 2018-04-22 00:00 BST
title: TV & Framer
subtitle: How we build interactive prototypes at YouView
permalink: tv-and-framer
---
<img src="<%= config[:host] %>/posts/2018/images/keyboard-input.gif" alt="A light blue gradient background with the words 'hello world', in white, appearing to type themselves.">

## Prototyping for TV

Information about user research and prototyping for TV is lacking compared to mobile & web. Most of it is transferrable but ‚Äì at YouView ‚Äì we've encountered problems where we've had to innovate in order to achieve what's standard practice on other platforms. One of the biggest barriers has been prototyping because we use infrared input and there aren't any obvious, pre-packaged solutions for prototyping with a remote control.

It feels like we've tried every prototyping tool under the sun *(R.I.P. Pixate ‚ö∞Ô∏è)*. Using Axure we'd tied ourselves into the deepest, most convoluted conditional logic  that it was no longer feasible to return to a project. 

A screenshot of one of my colleague's more complicated prototypes ‚Äì
<img src="<%= config[:host] %>/posts/2018/images/axure-chaos.png" alt="Screenshot of Axure with hundreds of conditional statements in the right hand panel." class="no-shadow" loop="true" style="margin-bottom:0;">
<span class="caption" style="margin-top: -0.2em;">Axure's conditional chaos. And that's a fraction of it.</span>

Axure was good in that it was one of the few prototyping tools that allowed for keyboard input. We'd discovered that you could buy a cheap infrared receiver called a [FLIRC](http://www.flirc.tv) and that it could be used to convert infrared input into keyboard input. Perfect.

We got by like this for some time and when we needed more intricate prototypes, we would hire contractors who weren't from a design background. That made communication difficult.

## Enter Framer.

Framer was introduced to me by a colleague who described it as, 
> ...pretty much javascript. If you can use that you might as well work on the set top box.

That was fairly intimidating but equipped with some decaying programming skills from school and a determination to stop using Axure (see above), I'd decided to stick with it.

We'd stumbled upon [this nifty little example](http://examples.framerjs.com/#event-keyboard-shortcuts.framer) which seemed to perfectly meet our needs. Unfortunately the syntax looked pretty dense compared to the mobile prototypes and it became fairly clear that Framer wasn't designed for TV but we persevered. 

<video src="<%= config[:host] %>/posts/2018/video/flirc.mp4" alt="Struan uses an infrared remote control to interact with a Framer prototype of YouView's TV Guide" controls="true" class="full-width" loop="true"></video>
<span class="caption">Using FLIRC with a YouView TV Guide prototype</span>

A year of learning later and we're finding it's quite hard to get an entire design team ‚Äì with little knowledge of object oriented programming ‚Äì to use a tool to do something for which it wasn't designed. Keyboard input creates a whole host of problems, such as repeating input and complicated syntax, so we came up with a *(hopefully)* simpler solution than Framer had previously offered.

<blockquote class="twitter-tweet tw-align-center" data-lang="en"><p lang="en" dir="ltr">Using a remote control with framer üòé by <a href="https://twitter.com/struanfraser?ref_src=twsrc%5Etfw">@struanfraser</a> uhuuuu I want to try that too <a href="https://twitter.com/hashtag/framerlondon?src=hash&amp;ref_src=twsrc%5Etfw">#framerlondon</a> <a href="https://t.co/alxncDo4Mq">pic.twitter.com/alxncDo4Mq</a></p>&mdash; Marie Schweiz (@ma_rylou) <a href="https://twitter.com/ma_rylou/status/988867630500057091?ref_src=twsrc%5Etfw">April 24, 2018</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>


## Keyboard Input for Framer

After many prototypes I felt like I'd come to a conclusion about how I wanted to use keyboard input in a way that was relatively similar to Framer's existing syntax. It still requires a knowledge of functions which I think was a bit of a stumbling block. That said, you only have to write one line of code for each key which simplifies things considerably ‚Äì

### The Old Way
```
enter = 13
document.addEventListener 'keydown', (event) ->
	keyCode = event.which
	eventHandler(keyCode)
	event.preventDefault()
eventHandler = Utils.throttle 0.3, (keyCode) ->
	switch keyCode
		when enter
			doSomething()
```

### The New Way
```
keyboard.onKey(keyboard.enter, doSomething, 0.3)
```

I've written a more comprehensive guide on how to use the module on Github so if the module sounds like something you'd be interested in, take a look ‚Äì

<a href="https://github.com/Skinny-Malinky/Keyboard-Input-for-Framer"><img src="<%= config[:host] %>/posts/2018/images/keyboard-input.gif" alt="A light blue gradient background with the words 'hello world', in white, appearing to type themselves.">
<span class = "caption">Get the Module</span></a>